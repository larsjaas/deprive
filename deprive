#!/usr/bin/env python
# **********************************************************************
#
# dep - dependency
# rive - to tear apart, tear into pieces
#
##COPYRIGHT
# Copyright (C) 2012, Lars J. Aas <lars.j.aas@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
##
#
##VERSION
# deprive v0.6
##
#
##USAGE
# Usage: deprive [options] [<files>...]
#   -h | -? | --help          print help text
#   --copyright               print the copyright text
#   --usage                   print usage information
#   --example                 print usage exampless
#   --version                 print version information
#   -v | --verbose            enable process output to stderr
#   --symbols <symbolsdb>     set filename for symbols database
#                             (default: symbols.py)
#   --scan                    scan object files for symbols
#   --stdin                   read object file list from stdin instead of
#                             command line
#   --merge                   merge object symbols with existing database
#                             content
#   --dependencies <depsdb>   set filename for dependency database
#                             (default: dependencies.py)
#-  --compact-db              avoid writing empty dependencies
#   --analyze                 analyze dependencies and write dependency database
#   --trace <object>          trace dependency tree for object
#   --format=<format>         output dependencies as format 'list', 'tree',
#                             'python' dict, or dot 'digraph'.
#   --list                    output dependencies as format 'list'
#   --tree                    output dependencies as format 'tree'
#   --python                  output dependencies as format 'python' dict
#   --digraph                 output dependencies as format dot 'digraph'
#   --prefix=<prefix>         set object path prefix to ignore
#-   --levels=<N>
#-  --group=<object|directory>
#-  --ignore=<pattern> --filter=<pattern>
#-  --stat
#-
##
#
##HELP
# Deprive is a utility for analyzing object file link dependencies.
# It can be useful when you work on cleaning up and refactoring legacy
# codebases with a lot of spaghetti code.
#
# Run 'deprive --usage' for information about command options.
##
#
##EXAMPLES
# Analyze object symbols and store them in 'syms.py':
#   $ deprive --symbols syms.py --scan */*.o
#
# Analyze object dependencies from the symbols database in syms.py and store
# the dependencies in 'deps.py':
#   $ deprive --symbols syms.py --dependencies deps.py \
#       --analyze */*.o
#
# Use --stdin if the file list might be too long even for xargs:
#   $ find build/ -name "*.o" | deprive --stdin --scan --analyze
#
##
#
# Author:
#   Lars J. Aas <lars.j.aas@gmail.com>
#
##TODO
# - docstrings
##
# **********************************************************************

import sys, os, platform, commands, imp, string, re

# if sys.version_info[:2] <= (2, 6):
#     sys.stderr.write('error: deprive requires python 2.X or later\n')
#     exit(1)

control = {}
prefix = ''
entry = '%ENTRY%'

def GetConfig(program):
    config = {
        'program': program,
        'system': platform.system().lower(),
        'defined': '',
        'undefined': '',
        'prefix': ':::',
        'verbose': False,
        'defs-cmd': '',
        'defs-regex': False,
        'refs-cmd': '',
        'refs-regex': False,
        'ignore': [],
    }

    # TODO: for cygwin/windows, add objdump or dumpbin support
    if config['system'] == 'darwin':
        config['defs-cmd'] = 'nm -gjU {0}'
        config['refs-cmd'] = 'nm -gju {0}'

    elif config['system'] == 'linux':
        config['defs-cmd'] = 'nm -g --defined-only {0}'
        config['refs-cmd'] = 'nm -g --undefined-only {0}'
        config['defs-regex'] = re.compile('^.{19}(.*)$')
        config['refs-regex'] = re.compile('^.{19}(.*)$')

    else:
        print config['program'] + ': error: do not know this system.'
        exit(-1)

    config['symbols-db'] = 'symbols.py'
    config['dependencies-db'] = 'dependencies.py'

    return config

def PrintHereDocument(filename, block):
    file = open(filename)
    inblock = False
    while 1:
        line = file.readline().strip()
        if not line:
            break
        if inblock:
            if line == '##':
                break
            elif line.startswith('#-'):
                pass
            else:
                print line[2:]
        else:
            if line == '##' + block.upper():
                inblock = True
    file.close()

# **************************************************************************
# Dependencies

class Dependencies(object):
    def __init__(self, config):
        self.imports = {}
        self.exports = {}
        self.dependencies = {}
        self.config = config

    def load_as_module(self, modulename, filename, required):
        module = imp.new_module(modulename)
        module.__file__ = filename
        try:
            execfile(filename, module.__dict__)
        except (RuntimeError):
            print 'runtime error: could not load {0}.'.format(filename)
            return None
        for symbol in required:
            if not symbol in module.__dict__:
                print 'error: {0} is not a {1} database.'.\
                      format(filename, modulename)
                return None
        return module

    def syms_load(self, filename):
        if self.config['verbose']:
            sys.stderr.write('Loading symbols...\n')
        module = self.load_as_module('symbols', filename,
                                     ['getExports', 'getImports'])
        if module:
            self.exports = module.getExports()
            self.imports = module.getImports()
        if self.config['verbose']:
            sys.stderr.write('Done.\n')

    def syms_save(self, filename):
        if self.config['verbose']:
            sys.stderr.write('Saving symbols...\n')
        if filename == '-':
            PythonOutput(self.exports, 'getExports')
            PythonOutput(self.imports, 'getImports')
        else:
            f = open(filename, 'w')
            PythonOutput(self.exports, 'getExports', f)
            PythonOutput(self.imports, 'getImports', f)
            f.close()
        if self.config['verbose']:
            sys.stderr.write('Done.\n')

    def deps_load(self, filename):
        if self.config['verbose']:
            sys.stderr.write('Loading dependencies...\n')
        module = self.load_as_module('dependencies', filename,
                                     ['getDependencies'])
        if module:
            self.dependencies = module.getDependencies()
        if self.config['verbose']:
            sys.stderr.write('Done.\n')

    def deps_save(self, filename):
        if self.config['verbose']:
            sys.stderr.write('Saving dependencies...\n')
        if filename == '-':
            PythonOutput(self.dependencies, 'getDependencies')
        else:
            f = open(filename, 'w')
            PythonOutput(self.dependencies, 'getDependencies', f)
            f.close()
        if self.config['verbose']:
            sys.stderr.write('Done.\n')

    def syms_scan(self, paths):
        sym2obj = {}
        deps = self.dependencies
        for path in paths:
            if not os.path.exists(path) or os.path.isdir(path):
                sys.stderr.write('warning: no file "{0}".'.format(path))
                paths.remove(path)

        maxindex = len(paths)
        index = 0
        for file in paths:
            handle = file
            if file.startswith(self.config['prefix']):
                handle = file[len(self.config['prefix']):]

            self.exports[handle] = []

            index = index + 1
            if self.config['verbose']:
                sys.stdout.write('Reading exports for {0} ({1}/{2}).\n'.\
                                 format(handle, index, maxindex))
            command = self.config['defs-cmd'].format(file)
            for symbol in commands.getoutput(command).split('\n'):
                if self.config['defs-regex']:
                    symbol = self.config['defs-regex'].sub(r'\1', symbol)
                self.exports[handle].append(symbol)
            self.exports[handle].sort()

        index = 0
        for file in paths:
            handle = file
            if file.startswith(self.config['prefix']):
                handle = file[len(self.config['prefix']):]

            self.imports[handle] = []

            index = index + 1
            if self.config['verbose']:
                sys.stdout.write('Reading imports for {0} ({1}/{2}).\n'.\
                                 format(handle, index, maxindex))
            command = self.config['refs-cmd'].format(file)
            for symbol in commands.getoutput(command).split('\n'):
                if self.config['refs-regex']:
                    symbol = self.config['refs-regex'].sub(r'\1', symbol)
                self.imports[handle].append(symbol)
            self.imports[handle].sort()

    def deps_analyze(self):
        sym2obj = {}
        for obj in self.exports:
            for symbol in self.exports[obj]:
                sym2obj[symbol] = obj

        for obj in self.imports:
            if not obj in self.dependencies:
               self.dependencies[obj] = []
            for symbol in self.imports[obj]:
                if symbol in sym2obj:
                    target = sym2obj[symbol]
                    if not target in self.dependencies[obj]:
                        self.dependencies[obj].append(target)
                # else: undefined reference could go to lib
            self.dependencies[obj].sort()

    def trace(self, source, levels = False):
        # TODO: fix bug that causes tree to be bogus
        found = False
        for key in self.dependencies:
            if key.endswith(source):
                found = key
                break
        if not found:
            print 'key {0} not found.'.format(source)
            return None

        deps = {
            entry: [ found, ],
        }
        if not levels:
            deps[found] = self.dependencies[found]
            incoming = deps[found]
            i = 0
            while i < len(incoming):
                obj = incoming[i]
                if not obj in deps:
                    if obj in self.dependencies:
                        deps[obj] = self.dependencies[obj]
                        for item in deps[obj]:
                            if item not in incoming:
                                incoming.append(item)
                    else:
                        deps[obj] = []
                i = i + 1

        else:
            deps[found] = self.dependencies[found]
            thislevel = deps[found]
            nextlevel = []
            exit(1)
            # FIXME: implement looping level by level
            #while levels > 1:
            #    levels -= 1
            #    for key in incoming:
            #        if not key in deps:

        return deps

# **********************************************************************

def ListOutput(dependencies, array, current, stream = sys.stdout):
    if current != entry:
        array.append(current)

    if current in dependencies:
        for dependency in dependencies[current]:
            if dependency not in array:
                ListOutput(dependencies, array, dependency)

    if current == entry:
        for item in sorted(array):
            stream.write(item + '\n')

def TreeOutput(dependencies, stack, current, \
               indent = '', stream = sys.stdout, flags = [False]):

    if len(flags) > 1 and flags[len(flags)-2]:
        i = len(indent) - 4
        if indent[i] == '|':
          indent = indent[0:i] + ' ' + indent[i+1:]

    if current in stack:
        stream.write(indent + ' [' + current + ']\n')
        return

    newstack = stack + [ current ]
    if indent == '':
        stream.write('.' + current + '\n')
    else:
        stream.write(indent + ' ' + current + '\n')
    newindent = indent.translate(string.maketrans('-+', ' |')) + '+-'
    if current in dependencies:
        for dependency in dependencies[current]:
            flag = False
            if dependency == dependencies[current][len(dependencies[current])-1]:
                flag = True
            newflags = flags + [ flag ]
            TreeOutput(dependencies, newstack, dependency,
                       indent=newindent,
                       stream=stream,
                       flags=newflags)

def PythonOutput(dependencies, funcname, stream = sys.stdout):
    # TODO: option for output'ing entry
    stream.write('def {0}():\n'.format(funcname))
    stream.write('    dict = {\n')
    for key in sorted(dependencies.keys()):
        if key == entry:
            continue
        stream.write('        \'{0}\': [\n'.format(key))
        for value in sorted(dependencies[key]):
            stream.write('            \'{0}\',\n'.format(value))
        stream.write('        ],\n')
    stream.write('    }\n')
    stream.write('    return dict\n')

def DiGraphOutput(dependencies, entry, stream = sys.stdout):
    def GetName(path):
        pos = path.rfind('/')
        if pos != -1:
            return path[pos+1:]
        return path

    graphname = dependencies[entry][0]
    stream.write('digraph "{0}" {1}\n'.format(graphname, '{'))
    for obj in sorted(dependencies.keys()):
        if obj == entry:
            continue
        if obj == graphname:
            stream.write('  "{0}" [color=red];\n'.format(GetName(obj)))
        else:
            stream.write('  "{0}";\n'.format(GetName(obj)))
    stream.write('\n')

    for obj in sorted(dependencies.keys()):
        if obj == entry:
            continue
        for dep in dependencies[obj]:
            stream.write('  "{0}" -> "{1}";\n'.format(GetName(obj), GetName(dep)))

    stream.write('}\n')

# **********************************************************************

def main():
    config = GetConfig(sys.argv[0])

    longopts = {
        '-?': '--help',
        '-h': '--help',
        '-v': '--verbose',
    }

    aliases = {
        '--tree': '--format=tree',
        '--list': '--format=list',
        '--python': '--format=python',
        '--digraph': '--format=digraph',
    }

    heredocs = [
        '--version',
        '--copyright',
        '--usage',
        '--help',
        '--examples',
    ]

    restargs = []

    control['args'] = 'cmdline'
    control['symbols-load'] = False
    control['symbols-scan'] = False
    control['symbols-save'] = False
    control['dependencies-load'] = False
    control['analyze'] = False
    control['dependencies-save'] = False
    control['trace'] = False
    control['output'] = 'list'
    control['stdin'] = False

    next = 'program'
    for opt in sys.argv:
        if next != '':
            if next == 'restargs':
                restargs += [ opt ]
                continue

            elif next == 'symbols':
                config['symbols-db'] = opt

            elif next == 'dependencies':
                config['dependencies-db'] = opt

            elif next == 'trace':
                control['trace'] = opt

            elif next == 'program':
                config['programpath'] = opt

            next = ''
            continue

        if opt.startswith('-'):
            if opt.startswith('--'):
                pass

            elif opt in longopts:
                opt = longopts[opt]

            else:
                print 'error: unknown option "' + opt + '".\n'
                exit(1)

        if opt.startswith('--'):
            if opt in aliases:
                opt = aliases[opt]

            if opt in heredocs:
                PrintHereDocument(config['program'], opt[2:])
                exit(0)

            elif opt == '--':
                next = 'restargs'

            elif opt == '--symbols':
                next = 'symbols'

            elif opt == '--dependencies':
                next = 'dependencies'

            elif opt == '--trace':
                next = 'trace'

            elif opt == '--verbose':
                config['verbose'] = True

            elif opt == '--scan':
                control['symbols-scan'] = True
                control['symbols-save'] = True

            elif opt == '--analyze':
                control['analyze'] = True
                control['dependencies-save'] = True

            elif opt == '--stdin':
                control['args'] = 'stdin'

            elif opt == '--merge':
                control['symbols-load'] = True
                control['dependencies-load'] = True

            elif opt.startswith('--format='):
                outputformat = opt.split('=', 1)[1]
                if outputformat in ['list', 'tree', 'python', 'digraph']:
                    control['output'] = outputformat
                else:
                    sys.stderr.write('error: unknown format "{0}" for --output.\n'.\
                                     format(outputformat))
                    exit(1)

            elif opt.startswith('--prefix='):
                config['prefix'] = opt.split('=', 1)[1]

            else:
                print 'error: unknown long-option "' + opt + '".\n'
                exit(1)

        else:
            restargs += [ opt ]

    # hook up some implicit functionality
    if control['analyze'] and not control['symbols-scan']:
        control['symbols-load'] = True

    if control['trace'] and not control['analyze'] and \
           not control['dependencies-load']:
        control['dependencies-load'] = True

# **************************************************************************

    dependencies = Dependencies(config)

    if control['args'] == 'stdin':
        if config['verbose']:
            print 'Reading from stdin.'

        restargs = sys.stdin.readlines()
        i = 0
        count = len(restargs)
        while i < count:
            restargs[i] = restargs[i].strip()
            i += 1

        if config['verbose']:
            print 'Got {0} objects.'.format(len(restargs))

    # database update first
    if control['symbols-load']:
        if config['symbols-db'] != '':
            dependencies.syms_load(config['symbols-db'])

    if control['symbols-scan']:
        dependencies.syms_scan(restargs)

    if control['symbols-save']:
        if config['symbols-db'] != '':
            dependencies.syms_save(config['symbols-db'])

    if control['dependencies-load']:
        if config['dependencies-db'] != '':
            dependencies.deps_load(config['dependencies-db'])

    if control['analyze']:
        dependencies.deps_analyze()

    if control['dependencies-save']:
        if config['dependencies-db'] != '':
            dependencies.deps_save(config['dependencies-db'])

    deps = {}
    if control['trace']:
        deps = dependencies.trace(control['trace'])

        if not control['output']:
            pass

        elif control['output'] == 'list':
            ListOutput(deps, [], entry)

        elif control['output'] == 'tree':
            TreeOutput(deps, [], deps[entry][0])

        elif control['output'] == 'python':
            PythonOutput(deps, 'getDependencies')

        elif control['output'] == 'digraph':
            DiGraphOutput(deps, entry)

#       elif control['output'] == 'digraph':
#           pass

        else:
            sys.stderr.write('error: unknown output option "{0}".\n'. \
                             format(control['output'])) 

if __name__ == '__main__':
    main()

# vim: ft=python:shiftwidth=4
